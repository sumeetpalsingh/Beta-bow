//creates a 3d ternary plot from csv table containing xyz ch1 ch2 ch3 data 
// note : need to save csv file from "Final Measurement table" generated by "betabow.ijm"
// Drag and drop the .CSV file in the Fiji main window, it will open as a "Results" file (displaying Cell#,X,Y,Z,Ch1,Ch2,Ch3,SD_Ch1,SD_Ch2,SD_Ch3 values from each cell)
// Run macro.
//Note: the macro only plots trichromatic cells!!

//Original macro kindly provided by Xavier Morin (xavier.morin@ens.fr).
//Copyright (C) 2016  Sumeet Pal Singh

//This macro is free code: you can redistribute it and/or modify
 //it under the terms of the GNU General Public License as published by
//the Free Software Foundation, either version 3 of the License, or any later version.

//This code is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU General Public License for more details: <http://www.gnu.org/licenses/>.

//The code can be modified, distributed and sold without any strings attached. 
//If you find the code useful, you can buy me coffee when we meet.
//Find me at sumeetpalsingh@gmail.com or http://journalcoverage.blogspot.com/

Dialog.create("ternary plot parameters");
Dialog.addMessage("Plot size (pixels)");
Dialog.addNumber(" axis length", 500);
Dialog.addNumber("margins", 50);
Dialog.addMessage("point size (pixels)");
Dialog.addNumber("", 12);

Dialog.show();
P=Dialog.getNumber();
M=Dialog.getNumber();
d=Dialog.getNumber();
record=Dialog.getCheckbox();

h = 0.8660254;
W = P+2*M; 
H = P*h+2*M;
f = P/5;
g = f*h;
p=P/500;
BX=M;
BY=M;
RX=W-M;
RY=M;
GX=(BX+RX)/2;
GY=M+P*h;

//IJ.renameResults("Results"); 
n = nResults();
  a1 = newArray(n);
  for (i=0; i<n; i++)
      a1[i] = getResult("Z", i);

Array.getStatistics(a1, min, max)
//z_levels = max+4;

//newImage("ternary plot", "8-bit RGB", W, H, z_levels);
newImage("ternary plot", "8-bit RGB", W, H, 1);

	setLineWidth(p);
	setColor("gray");
	for (k=1; k<=4; k++) {
	drawLine(BX+k*f/2, BY+k*g, RX-k*f/2, RY+k*g);
	drawLine(RX-k*f, RY, GX-k*f/2, GY-k*g);
	drawLine(GX+k*f/2, GY-k*g, BX+k*f, BY);
	}
	for (j=0; j<P; j++) {
	setColor(j*255/P, 0, (P-j)*255/P);
	drawOval(BX+j, BY, p, p);
	setColor(0, j*255/P, (P-j)*255/P);
	drawOval(BX+j/2, BY+j*h, p, p);
	setColor((P-j)*255/P, j*255/P, 0);
	drawOval(BX+P-j/2, BY+j*h, p, p);
	}

for (j=1; j<=n; j++) {
	RR=getResult("Ch1", j-1);
	GG=getResult("Ch2", j-1);
	BB=getResult("Ch3", j-1);
	sdRR=getResult("SD_Ch1", j-1);
	sdGG=getResult("SD_Ch2", j-1);
	sdBB=getResult("SD_Ch3", j-1);
	if (RR > 2.58*sdRR && GG > 2.58*sdGG && BB > 2.58*sdBB)	{
		tot=(RR+GG+BB);
		R=RR/tot;
		G=GG/tot;
		B=BB/tot;
		R1=floor(R*255);
		G1=floor(G*255);
		B1=floor(B*255);
	
		y = G*h*P;
		x = (R+G/2)*P;
	
		setColor(R1, G1, B1);
		fillOval(x+M-d/2, y+M-d/2, d, d);
		drawString(j,x+M-d/2, y+M-d/2);
		if (record == true) {
			d1=d*0.88;
			d2=d*0.7;
			d3=d*0.5;
		}
		else;
	}
}
